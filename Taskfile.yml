version: "3"

dotenv: [".env", "{{.HOME}}/.env"]

includes:
  scanner:
    taskfile: ./scanner/Taskfile.yml
    dir: ./scanner

tasks:
  build:
    desc: "Build the package"
    cmds:
      - python -m build

  build:all:
    desc: "Build all artifacts"
    cmds:
      - task: build
      - task: scanner:build
      - task: scanner:build:all

  build:scanner:
    desc: "Build the scanner"
    cmds:
      - task: scanner:build

  check:
    desc: "Check code by linting"
    cmds:
      - ruff check

  check:fix:
    desc: "Check code and try to fix it"
    cmds:
      - ruff check --fix

  clean:
    desc: "Clean the build files"
    cmds:
      - rm -rf build/ dist/ src/*.egg-info/ .mypy_cache/ .pytest_cache/ .coverage .scannerwork
      - rm -rf docs/coverage/ tests/coverage.xml

  clean:all:
    desc: "Clean all"
    cmds:
      - task: clean
      - task: clean:caches
      - task: scanner:clean

  clean:caches:
    desc: "Clean caches"
    cmds:
      - cmd: .venv/bin/ruff clean
        ignore_error: true
      - find . -type d -name "__pycache__" -exec rm -r {} +

  clean:scanner:
    desc: "Clean scanner build artifacts"
    cmds:
      - task: scanner:clean

  clean:venv:
    desc: "Clean .venv"
    cmds:
      - rm -rf .venv

  ci:
    desc: "Run the CI pipeline"
    cmds:
      - task: check
      - task: test
    deps:
      - install:all

  default:
    desc: "List available tasks"
    cmds:
      - task --list --sort alphanumeric

  format:
    desc: "Format the code using ruff"
    cmds:
      - ruff format
      - ruff check --select I --fix .

  install:
    desc: "Install the package in editable mode"
    cmds:
      - .venv/bin/python -m pip install --trusted-host pypi.org --trusted-host pypi.python.org -U pip setuptools wheel
      - .venv/bin/python -m pip install --trusted-host pypi.org --trusted-host pypi.python.org -e .[dev,build,examples]

  install:all:
    desc: Install all packages in editable mode, including creating venv"
    cmds:
      - task: install:venv
      - task: install

  install:venv:
    desc: "Install venv"
    cmds:
      - python3 -m venv .venv

  pre-commit:
    desc: "Run before commit"
    cmds:
      - task: format
      - task: check
      - task: test

  run:svc:
    desc: "Run the JFind service"
    cmds:
      - python -m src.jfind_svc.main

  test:
    desc: "Run the tests using pytest"
    cmds:
      - pytest
  test:cov:
    desc: "Run the tests using pytest with coverage"
    cmds:
      - pytest --cov src --cov-report html:docs/coverage --cov-report xml:tests/coverage.xml -x
